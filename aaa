unit uEditorSql;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Menus;

type
  TMemo = class (Vcl.StdCtrls.TMemo)
  private
    procedure WMPaint(var Message: TWMPaint); message WM_PAINT;
  protected
    procedure Change; override;
  public
    function TopLine: Integer;
    function VisibleLines: Integer;
  end;

  TForm9 = class(TForm)
    Memo1: TMemo;
    Button1: TButton;
    PopupMenu1: TPopupMenu;
    Ocorrencia: TMenuItem;
    Sugesto: TMenuItem;
    PopupMenu2: TPopupMenu;
    function LastWord(const s: String): String;
    procedure Button1Click(Sender: TObject);
    procedure Memo1Change(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Memo1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Memo1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure SugestoClick(Sender: TObject);
  private
    { Private declarations }
    vCorrigir : Boolean;
    vListaTabelasReservadas : TStringList;
    function NomeDeTabelas(aTexto: String): Boolean;
    function SelectWordUnderCaret(AMemo: TMemo): string;
    procedure ItemClick(Sender: TObject);
    function PalavraCorrigida(aTexto: String): String;
    function RemoveAcento(Str: string): string;
  public
    { Public declarations }
  end;

var
  Form9: TForm9;

implementation

{$R *.dfm}

procedure TForm9.Memo1Change(Sender: TObject);
begin
  Memo1.Invalidate;
end;

procedure TForm9.ItemClick(Sender: TObject);
begin
{}
end;

function TForm9.SelectWordUnderCaret(aMemo: TMemo): String;
var
   Line    : Integer;
   Column  : Integer;
   LineText: string;
   InitPos : Integer;
   EndPos  : Integer;
begin
   //Get the caret position
   Line   := aMemo.Perform(EM_LINEFROMCHAR,aMemo.SelStart, 0) ;
   Column := aMemo.SelStart - aMemo.Perform(EM_LINEINDEX, Line, 0) ;
   //Validate the line number
   if aMemo.Lines.Count-1 < Line then Exit;

   //Get the text of the line
   LineText := aMemo.Lines[Line];

   Inc(Column);
   InitPos := Column;
   //search the initial position using the space symbol as separator
   while (InitPos > 0) and (LineText[InitPos] <> ' ') do Dec(InitPos);
   Inc(Column);

   EndPos := Column;
   //search the final position using the space symbol as separator
   while (EndPos <= Length(LineText)) and (LineText[EndPos] <> ' ') do Inc(EndPos);

   //Get the text
   Result := Trim(Copy(LineText, InitPos, EndPos - InitPos));

   //Finally select the text in the Memo
   aMemo.SelStart  := aMemo.Perform(EM_LINEINDEX, Line, 0)+InitPos;
   aMemo.SelLength := Length(Result);
end;

procedure TForm9.SugestoClick(Sender: TObject);
var
  vTemp : String;
begin
  vTemp := Copy(Sugesto.Caption,Pos(':',Sugesto.Caption)+1,Length(Sugesto.Caption));
  Memo1.Text := StringReplace(Memo1.Text,RemoveAcento(vTemp),vTemp,[rfReplaceAll]);
end;

procedure TForm9.Memo1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  if (Button = mbRight) then
  begin
    mouse_event(MOUSEEVENTF_LEFTDOWN,Mouse.CursorPos.x,mouse.CursorPos.y,0,0);
    mouse_event(MOUSEEVENTF_LEFTUP,Mouse.CursorPos.x,mouse.CursorPos.y,0,0);
  end;
  Memo1.Invalidate;
end;

procedure TForm9.Memo1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var
  vPalavra : String;
begin
  vPalavra := SelectWordUnderCaret(Memo1);
  PopupMenu1.Items[0].Caption := 'Ocorrência: ';
  PopupMenu1.Items[1].Caption := 'Sugestões: ';
  if (Button = mbRight) and
     (vPalavra   <> '') then
  begin
    Ocorrencia.Caption := Ocorrencia.Caption + vPalavra;
    Sugesto.Caption    := Sugesto.Caption + PalavraCorrigida(vPalavra);

    PopupMenu1.Popup(Mouse.CursorPos.x,Mouse.CursorPos.y);
  end;
end;

procedure TForm9.Button1Click(Sender: TObject);
begin
  vCorrigir := True;
  vListaTabelasReservadas.LoadFromFile('D:\Dicionario\ComAcentos.txt');
  Memo1.Change;
end;

procedure TForm9.FormCreate(Sender: TObject);
begin
  vListaTabelasReservadas := TStringList.Create;
  vListaTabelasReservadas.Clear;
end;

function TForm9.LastWord(const s: String): String;
begin
  with TStringList.Create do
  try
    Delimiter := ' ';
    DelimitedText := s;
    Result := Strings[Count - 1];
    Result := Copy(Result,1, Length(Result) - 1);
  finally
    Free;
  end;
end;

function Separador(aCaratere: Char): Boolean;
begin
  case aCaratere of
    '.', ';', ',', ':', '¡', '!', '·', '"', '''', '^', '+', '-', '*', '/', '\', '¨', ' ',
    '`', '[', ']', '(', ')', 'º', 'ª', '{', '}', '?', '¿', '%', '=':
      Result := True;
    else
      Result := False;
  end;
end;

function ProximaPalavra(var aPalavra: String; var aPalavraAnterior: String): String;
begin
  Result   := '';
  aPalavraAnterior := '';
  if aPalavra <> '' then
  begin
    while (aPalavra <> '') and Separador(aPalavra[1]) do
    begin
      aPalavraAnterior := aPalavraAnterior + aPalavra[1];
      Delete(aPalavra, 1, 1);
    end;

    while (aPalavra <> '') and not Separador(aPalavra[1]) do
    begin
      Result := Result + aPalavra[1];
      Delete(aPalavra, 1, 1);
    end;
  end;
end;

function TForm9.NomeDeTabelas(aTexto: String): Boolean;
begin
  Result := False;

  if (aTexto <> '') and
     (vCorrigir = True) then
    Result := vListaTabelasReservadas.IndexOf(LowerCase(aTexto)) <> - 1;
end;

function TForm9.PalavraCorrigida(aTexto: String): String;
var
  vTemp : String;
  vSemAcentos : TStringList;
begin
  Result := '';
  vListaTabelasReservadas.Clear;
  vListaTabelasReservadas.LoadFromFile('D:\Dicionario\ComAcentos.txt');

  vSemAcentos := TStringList.Create;
  vSemAcentos.Clear;
  vSemAcentos.LoadFromFile('D:\Dicionario\SemAcentos.txt');

  if (vSemAcentos.IndexOf(LowerCase(aTexto)) > - 1) then
    Result := vListaTabelasReservadas.Strings[vSemAcentos.IndexOf(LowerCase(aTexto))];
  vListaTabelasReservadas.Clear;
  vSemAcentos.Clear;
end;

function TForm9.RemoveAcento(Str: string): string;
const
  ComAcento = 'àâêôûãõáéíóúçüÀÂÊÔÛÃÕÁÉÍÓÚÇÜ';
  SemAcento = 'aaeouaoaeioucuAAEOUAOAEIOUCU';
var
   x: Integer;
begin;
  for x := 1 to Length(Str) do
  begin
  if Pos(Str[x],ComAcento) <> 0 then
    Str[x] := SemAcento[Pos(Str[x], ComAcento)];
  end;
  Result := Str;
end;

function TMemo.VisibleLines: Integer;
begin
  Result := Height div (Abs(Self.Font.Height) + 2);
end;

function TMemo.TopLine: Integer;
begin
  Result := SendMessage(Self.Handle, EM_GETFIRSTVISIBLELINE, 0, 0);
end;

procedure TMemo.Change;
begin
   Form9.Memo1.Invalidate;
end;

procedure TMemo.WMPaint(var Message: TWMPaint);
var
  PS         : TPaintStruct;
  DC         : HDC;
  Canvas     : TCanvas;
  vCorAntiga : TColor;
  Size       : TSize;

  i,
  x,
  y,
  Max       : Integer;

  s,
  vPalavra,
  vPalavraAnterior  : String;
begin
    DC := Message.DC;

    if DC = 0 then
      DC := BeginPaint(Handle, PS);

    Canvas := TCanvas.Create;
    try
      vCorAntiga       := Font.Color;
      Canvas.Handle    := DC;
      Canvas.Font.Name := Font.Name;
      Canvas.Font.Size := Font.Size;

      with Canvas do
      begin
        Max := TopLine + VisibleLines;

        if Max > Pred(Lines.Count) then
          Max := Pred(Lines.Count);

        Brush.Color := Self.Color;
        FillRect(Self.ClientRect);
        y := 1;

        for i := TopLine to Max do
        begin
          x := 2;
          s := Lines[i];

          //Detectando palavra linha a linha
          vPalavra := ProximaPalavra(s, vPalavraAnterior);
          while vPalavra <> '' do
          begin
            Font.Color := vCorAntiga;
            TextOut(x, y, vPalavraAnterior);
            GetTextExtentPoint32(DC, PChar(vPalavraAnterior), Length(vPalavraAnterior), Size);
            Inc(x, Size.cx);

            Font.Color := clBlack; //Cor padrão das palavras

            {if PalavraReservada(vPalavra) then //Se encontrou palavra
            begin
              Font.Color := clBlue;
              TextOut(x, y, vPalavra);
            end
            else if Numeros(vPalavra) then //Se encontrou numero
            begin
              Font.Color := clRed;
              TextOut(x, y, vPalavra);
            end
            else }if Form9.NomeDeTabelas(vPalavra) then //Se encontrou nome de Tabela
            begin
              Font.Color := clGreen;
              TextOut(x, y, vPalavra);
            end
            else
              TextOut(x, y, vPalavra);

            GetTextExtentPoint32(DC, PChar(vPalavra), Length(vPalavra), Size);
            Inc(x, Size.cx);

            vPalavra := ProximaPalavra(s, vPalavraAnterior);

            if (s = '') and (vPalavraAnterior <> '') then
            begin
              Font.Color := vCorAntiga;
              TextOut(x, y, vPalavraAnterior);
            end;
          end;

          if (s = '') and (vPalavraAnterior <> '') then
          begin
            Font.Color := vCorAntiga;
            TextOut(x, y, vPalavraAnterior);
          end;

          s := 'W';
          GetTextExtentPoint32(DC, PChar(s), Length(s), Size);
          Inc(y, Size.cy);
        end;
        Form9.vCorrigir := False;
        Form9.vListaTabelasReservadas.Clear;
      end;
    finally
      if Message.DC = 0 then
        EndPaint(Handle, PS);
    end;

    Canvas.Free;
end;

end.
